================================================================================
OTELNET MONO VERSION - 상세 개발 계획 (C# / Mono)
================================================================================

프로젝트명: otelnet_mono
목적: ../otelnet/ C 프로젝트를 C# Mono 기반으로 완전 재구현
분석 기반: otelnet 1.0.0 (2510+ 라인, RFC 854/855/856/858/1091/1184 구현)
생성일: 2025-10-25
언어: C# (.NET/Mono)
빌드: mcs (Mono C# Compiler)

================================================================================
1. 프로젝트 개요 및 목표
================================================================================

1.1 현재 otelnet 프로젝트 분석 요약
----------------------------------
언어: C (GNU11)
총 코드: ~2510 라인 (otelnet.c: 1514, telnet.c: 996)
구조:
  - src/otelnet.c: 메인 로직, 콘솔 모드, I/O 처리, 외부 프로그램 실행
  - src/telnet.c: RFC 854/855 텔넷 프로토콜 구현
  - include/otelnet.h: 주요 구조체 및 함수 선언
  - include/telnet.h: 텔넷 프로토콜 상수 및 구조체

핵심 기능:
  ✓ RFC 854: 기본 IAC/명령 처리 (완전 구현)
  ✓ RFC 855: 옵션 협상 (거의 완전, 일부 버그)
  ✓ RFC 856: Binary Transmission (완전 구현)
  ✓ RFC 858: SGA - Suppress Go Ahead (완전 구현)
  ✓ RFC 1091: Terminal-Type (부분 구현 - 단일 타입만)
  ✓ RFC 1184: LINEMODE (부분 구현 - MODE만, FORWARDMASK/SLC 미구현)
  ✓ RFC 1073: NAWS - Window Size (완전 구현)
  ✓ RFC 1079: TSPEED - Terminal Speed (완전 구현)
  ✓ RFC 1572: ENVIRON - Environment Variables (완전 구현)
  ✓ 콘솔 모드 (Ctrl+])
  ✓ 파일 전송 (sz/rz, sx/sy, kermit)
  ✓ 세션 로깅 (hex+ASCII dump)
  ✓ 파일 관리 (ls, pwd, cd)
  ✓ 통계 정보 (bytes sent/received, duration)

알려진 문제:
  ⚠ 옵션 협상 로직 버그 (미지원 옵션 거부 실패)
  ⚠ Terminal-Type 다중 타입 미지원
  ⚠ LINEMODE FORWARDMASK 미구현
  ⚠ LINEMODE SLC 미구현
  ⚠ TCP Urgent/OOB 데이터 미처리


1.2 Mono 버전 목표
------------------
목표 1: 100% 기능 동등성 - 기존 otelnet의 모든 기능을 동일하게 구현
목표 2: 버그 수정 - 알려진 모든 버그 해결
목표 3: 완전한 RFC 준수 - 미구현 RFC 기능 완성
목표 4: C# idiom - C#의 모범 사례 적용
목표 5: 크로스 플랫폼 - Linux, macOS, Windows (Mono 지원 환경)
목표 6: 문서화 - XML 문서 주석


1.3 기술 스택
-------------
언어: C#
런타임: Mono
컴파일러: mcs (Mono C# Compiler)
.NET: .NET Framework 4.x 호환
의존성: 표준 라이브러리만 사용 (외부 NuGet 없음)
  - System.Net.Sockets
  - System.IO
  - System.Diagnostics
  - Mono.Unix (터미널 제어)

외부 프로그램 (선택적):
  - sz/rz: XMODEM/YMODEM/ZMODEM
  - kermit: Kermit 프로토콜


================================================================================
2. 프로젝트 구조 설계
================================================================================

2.1 Mono 프로젝트 디렉토리 구조
-------------------------------
otelnet_mono/
├── OtelnetMono.sln              # 솔루션 파일 (선택적)
├── src/
│   ├── OtelnetMono.csproj       # 프로젝트 파일
│   │
│   ├── Program.cs               # 메인 엔트리포인트
│   │
│   ├── Telnet/                  # 텔넷 프로토콜
│   │   ├── TelnetProtocol.cs    # RFC 854 상수 및 기본
│   │   ├── TelnetConnection.cs  # 연결 관리
│   │   ├── TelnetState.cs       # 상태 머신
│   │   ├── OptionNegotiator.cs  # RFC 855 옵션 협상
│   │   ├── Subnegotiator.cs     # 서브협상 처리
│   │   └── Options/             # 옵션별 핸들러
│   │       ├── BinaryOption.cs
│   │       ├── SgaOption.cs
│   │       ├── EchoOption.cs
│   │       ├── TerminalTypeOption.cs
│   │       ├── NawsOption.cs
│   │       ├── LinemodeOption.cs
│   │       ├── TSpeedOption.cs
│   │       └── EnvironOption.cs
│   │
│   ├── Terminal/                # 터미널 제어
│   │   ├── TerminalController.cs
│   │   ├── RawMode.cs
│   │   └── WindowSize.cs
│   │
│   ├── Console/                 # 콘솔 모드
│   │   ├── ConsoleMode.cs
│   │   ├── CommandProcessor.cs
│   │   └── FileOperations.cs
│   │
│   ├── Transfer/                # 파일 전송
│   │   ├── ExternalProgram.cs
│   │   ├── XmodemTransfer.cs
│   │   ├── YmodemTransfer.cs
│   │   ├── ZmodemTransfer.cs
│   │   └── KermitTransfer.cs
│   │
│   ├── Logging/                 # 로깅
│   │   └── SessionLogger.cs
│   │
│   ├── Config/                  # 설정
│   │   ├── Configuration.cs
│   │   └── ConfigParser.cs
│   │
│   └── Utils/                   # 유틸리티
│       ├── ByteBuffer.cs
│       └── Statistics.cs
│
├── test/                        # 테스트
│   └── TelnetTests.cs
│
├── scripts/                     # 스크립트
│   ├── build.sh                 # mcs 빌드 스크립트
│   └── test_server.py           # 테스트 서버
│
├── docs/                        # 문서
│   ├── RFC_COMPLIANCE.md
│   └── ARCHITECTURE.md
│
├── Makefile                     # 빌드 자동화
└── README.md


2.2 핵심 타입 설계
------------------

// Telnet/TelnetState.cs
public enum TelnetState
{
    Data,
    IAC,
    Will,
    Wont,
    Do,
    Dont,
    SB,
    SBIAC,
    SeenCR
}

// Telnet/TelnetProtocol.cs
public static class TelnetProtocol
{
    // IAC 명령
    public const byte IAC = 255;
    public const byte WILL = 251;
    public const byte WONT = 252;
    public const byte DO = 253;
    public const byte DONT = 254;
    public const byte SB = 250;
    public const byte SE = 240;
    public const byte GA = 249;
    // ... 기타 명령들

    // 옵션
    public const byte TELOPT_BINARY = 0;
    public const byte TELOPT_ECHO = 1;
    public const byte TELOPT_SGA = 3;
    public const byte TELOPT_TTYPE = 24;
    public const byte TELOPT_NAWS = 31;
    public const byte TELOPT_TSPEED = 32;
    public const byte TELOPT_LINEMODE = 34;
    public const byte TELOPT_ENVIRON = 36;
}

// Telnet/TelnetConnection.cs
public class TelnetConnection : IDisposable
{
    private TcpClient client;
    private NetworkStream stream;

    private TelnetState state;
    private byte currentOption;

    private List<byte> sbBuffer;

    // 옵션 추적
    private bool[] localOptions;      // 로컬 옵션 상태
    private bool[] remoteOptions;     // 원격 옵션 상태
    private bool[] localSupported;    // 로컬 지원 옵션
    private bool[] remoteSupported;   // 원격 지원 옵션

    // 양방향 모드
    public bool BinaryLocal { get; set; }
    public bool BinaryRemote { get; set; }
    public bool EchoLocal { get; set; }
    public bool EchoRemote { get; set; }
    public bool SgaLocal { get; set; }
    public bool SgaRemote { get; set; }

    // 모드
    public bool IsLineMode { get; set; }
    public bool LinemodeActive { get; set; }
    public bool LinemodeEdit { get; set; }

    // 터미널 정보
    public List<string> TerminalTypes { get; set; }
    public int TerminalTypeIndex { get; set; }
    public int TerminalWidth { get; set; }
    public int TerminalHeight { get; set; }
    public string TerminalSpeed { get; set; }

    // 메서드
    public void Connect(string host, int port);
    public void Disconnect();
    public int Send(byte[] data);
    public int Receive(byte[] buffer);
    public byte[] ProcessInput(byte[] input);
    public byte[] PrepareOutput(byte[] output);
    // ...
}

// Program.cs
public class OtelnetContext
{
    public TelnetConnection Telnet { get; set; }
    public Configuration Config { get; set; }
    public SessionLogger Logger { get; set; }

    public bool IsRunning { get; set; }
    public ConsoleMode Mode { get; set; }

    public ulong BytesSent { get; set; }
    public ulong BytesReceived { get; set; }
    public DateTime ConnectTime { get; set; }

    // ...
}


================================================================================
3. 단계별 구현 계획 (총 15 단계)
================================================================================

단계 1: 프로젝트 초기화 및 기본 구조
-------------------------------------
□ 1.1 디렉토리 구조 생성
  mkdir -p src/{Telnet/Options,Terminal,Console,Transfer,Logging,Config,Utils}
  mkdir -p test scripts docs

□ 1.2 기본 프로젝트 파일 생성
  - Makefile: mcs 기반 빌드
  - build.sh: 빌드 스크립트
  - README.md

□ 1.3 .csproj 파일 생성 (선택적, msbuild가 있다면)
  <?xml version="1.0" encoding="utf-8"?>
  <Project DefaultTargets="Build" ToolsVersion="4.0"
           xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
      <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
      <Platform Condition=" '$(Platform)' == '' ">x86</Platform>
      <OutputType>Exe</OutputType>
      <RootNamespace>OtelnetMono</RootNamespace>
      <AssemblyName>otelnet</AssemblyName>
      <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    </PropertyGroup>
    <!-- ... -->
  </Project>

□ 1.4 Makefile 작성
  all: build

  build:
      mcs -out:otelnet.exe -r:Mono.Posix.dll \
          src/Program.cs \
          src/Telnet/*.cs \
          src/Telnet/Options/*.cs \
          src/Terminal/*.cs \
          src/Console/*.cs \
          src/Transfer/*.cs \
          src/Logging/*.cs \
          src/Config/*.cs \
          src/Utils/*.cs

  clean:
      rm -f otelnet.exe

  run:
      mono otelnet.exe


단계 2: 텔넷 프로토콜 기본 구조 (RFC 854)
-----------------------------------------
□ 2.1 상수 및 열거형 (src/Telnet/TelnetProtocol.cs)
  - IAC, WILL, WONT, DO, DONT, SB, SE, GA, NOP 등
  - 모든 TELOPT_* 상수
  - TelnetState 열거형

□ 2.2 연결 클래스 스켈레톤 (src/Telnet/TelnetConnection.cs)
  - TcpClient 기반 연결
  - Connect(host, port)
  - Disconnect()
  - Send/Receive 메서드

□ 2.3 IAC 처리 (src/Telnet/TelnetConnection.cs)
  - ProcessInput() - 상태 머신으로 IAC 파싱
  - PrepareOutput() - IAC 이스케이프
  - SendCommand(byte cmd)
  - SendNegotiate(byte cmd, byte option)

□ 2.4 상태 머신 구현
  - switch (state) 구조
  - StateData, StateIAC, StateWill, StateWont, StateDo, StateDont
  - StateSB, StateSBIAC, StateSeenCR

□ 2.5 테스트
  - 간단한 에코 서버 연결 테스트
  - IAC 이스케이프 테스트


단계 3: 옵션 협상 (RFC 855)
---------------------------
□ 3.1 협상 로직 (src/Telnet/OptionNegotiator.cs)
  - HandleNegotiate(byte cmd, byte option)
  - WILL/WONT/DO/DONT 처리
  - 루프 방지 (상태 변경 시에만 응답)
  - 미지원 옵션 거부 (버그 수정)

□ 3.2 지원 옵션 초기화
  - InitializeOptions()
  - localSupported[TELOPT_BINARY] = true
  - localSupported[TELOPT_SGA] = true
  - etc.

□ 3.3 테스트
  - 협상 시퀀스 테스트
  - 루프 방지 검증


단계 4: 기본 옵션 구현
----------------------
□ 4.1 BINARY (RFC 856) (src/Telnet/Options/BinaryOption.cs)
  - class BinaryOption
  - Handle() 메서드
  - BinaryLocal/BinaryRemote 플래그 관리

□ 4.2 SGA (RFC 858) (src/Telnet/Options/SgaOption.cs)
  - class SgaOption
  - SgaLocal/SgaRemote 플래그

□ 4.3 ECHO (src/Telnet/Options/EchoOption.cs)
  - class EchoOption
  - EchoLocal/EchoRemote 플래그

□ 4.4 모드 업데이트
  - UpdateMode() 메서드
  - ECHO + SGA → Character mode
  - 그 외 → Line mode


단계 5: 서브협상 기본 구조
--------------------------
□ 5.1 서브협상 처리 (src/Telnet/Subnegotiator.cs)
  - class Subnegotiator
  - HandleSubnegotiation(byte option, byte[] data)
  - 옵션별 디스패치

□ 5.2 서브협상 송신
  - SendSubnegotiation(byte option, byte[] data)
  - IAC 이중화 로직

□ 5.3 서브협상 수신
  - IAC SB ... IAC SE 파싱
  - IAC IAC → IAC 복원


단계 6: 고급 옵션 구현
----------------------
□ 6.1 TERMINAL-TYPE (RFC 1091)
  (src/Telnet/Options/TerminalTypeOption.cs)
  - TerminalTypes = { "XTERM", "VT100", "ANSI" }
  - SEND 요청 → IS <type> 응답
  - 다중 타입 순환

□ 6.2 NAWS (RFC 1073)
  (src/Telnet/Options/NawsOption.cs)
  - SendNAWS(width, height)
  - 16비트 big-endian 인코딩

□ 6.3 TSPEED (RFC 1079)
  (src/Telnet/Options/TSpeedOption.cs)
  - SEND → IS "38400,38400" 응답

□ 6.4 ENVIRON (RFC 1572)
  (src/Telnet/Options/EnvironOption.cs)
  - USER, DISPLAY 환경변수
  - VAR, VALUE 인코딩


단계 7: LINEMODE 구현 (RFC 1184)
--------------------------------
□ 7.1 MODE 서브옵션
  (src/Telnet/Options/LinemodeOption.cs)
  - MODE 파싱
  - EDIT, TRAPSIG, MODE_ACK 비트
  - MODE_ACK 응답

□ 7.2 FORWARDMASK 서브옵션 (신규)
  - byte[32] forwardmask
  - 비트마스크 파싱
  - 입력 처리 시 적용

□ 7.3 SLC 서브옵션 (신규)
  - class SLCTriple { byte Function; byte Flags; byte Value; }
  - List<SLCTriple> slcTable
  - 3바이트 트리플 파싱


단계 8: 터미널 제어
-------------------
□ 8.1 Raw 모드 (src/Terminal/RawMode.cs)
  - Mono.Unix.Native 사용
  - SetRaw() - termios 설정
  - Restore() - 원래 상태 복원

□ 8.2 윈도우 크기 (src/Terminal/WindowSize.cs)
  - GetWindowSize() - ioctl(TIOCGWINSZ)
  - SIGWINCH 시그널 처리
  - Mono.Unix.Native.Syscall

□ 8.3 터미널 컨트롤러 (src/Terminal/TerminalController.cs)
  - class TerminalController
  - Setup(), Restore()
  - 로컬 에코 로직


단계 9: 설정 파일 처리
----------------------
□ 9.1 설정 클래스 (src/Config/Configuration.cs)
  public class Configuration
  {
      public string KermitPath { get; set; }
      public string SendZmodemPath { get; set; }
      public string ReceiveZmodemPath { get; set; }
      public bool LogEnabled { get; set; }
      public string LogFile { get; set; }
  }

□ 9.2 파서 (src/Config/ConfigParser.cs)
  - Load(string path)
  - KEY=VALUE 파싱
  - 주석 처리
  - 기본값


단계 10: 로깅
-------------
□ 10.1 세션 로거 (src/Logging/SessionLogger.cs)
  public class SessionLogger
  {
      private StreamWriter writer;

      public void LogData(string direction, byte[] data);
      // hex+ASCII dump 형식
  }


단계 11: 파일 전송
------------------
□ 11.1 외부 프로그램 실행 (src/Transfer/ExternalProgram.cs)
  public class ExternalProgram
  {
      public int Execute(string program, string[] args,
                         Stream stdin, Stream stdout);
  }

  - System.Diagnostics.Process 사용
  - StandardInput/Output/Error 리다이렉션

□ 11.2 프로토콜 래퍼
  - XmodemTransfer.cs
  - YmodemTransfer.cs
  - ZmodemTransfer.cs
  - KermitTransfer.cs


단계 12: 콘솔 모드
------------------
□ 12.1 콘솔 모드 (src/Console/ConsoleMode.cs)
  public enum Mode { Client, Console }

  public class ConsoleMode
  {
      public void Enter();
      public void Exit();
  }

□ 12.2 명령 처리 (src/Console/CommandProcessor.cs)
  - ProcessCommand(string command)
  - help, quit, exit, stats
  - sz, sy, sx, rz, ry, rx
  - kermit

□ 12.3 파일 작업 (src/Console/FileOperations.cs)
  - Ls(string path)
  - Pwd()
  - Cd(string path)


단계 13: 메인 애플리케이션
--------------------------
□ 13.1 프로그램 클래스 (src/Program.cs)
  class Program
  {
      static void Main(string[] args)
      {
          var context = new OtelnetContext();
          context.ParseArgs(args);
          context.Run();
      }
  }

□ 13.2 컨텍스트 클래스
  public class OtelnetContext
  {
      // 필드들

      public void Run()
      {
          // 이벤트 루프
          while (IsRunning)
          {
              // Select 또는 비동기 I/O
          }
      }
  }

□ 13.3 I/O 이벤트 루프
  - Console.Read() (stdin)
  - NetworkStream.Read() (telnet)
  - UnixSignal (SIGINT, SIGTERM, SIGWINCH)

□ 13.4 명령행 인자
  - host, port
  - -c config
  - --help, --version


단계 14: 빌드 및 테스트
-----------------------
□ 14.1 Makefile 완성
  all: build

  SOURCES = $(wildcard src/**/*.cs)

  build:
      mcs -out:otelnet.exe -r:Mono.Posix.dll \
          -r:System.dll -r:System.Net.dll \
          $(SOURCES)

  debug:
      mcs -debug -out:otelnet.exe -r:Mono.Posix.dll \
          -r:System.dll -r:System.Net.dll \
          $(SOURCES)

  test:
      mono otelnet.exe localhost 23

  clean:
      rm -f otelnet.exe otelnet.exe.mdb

□ 14.2 빌드 스크립트 (scripts/build.sh)
  #!/bin/bash
  mcs -out:otelnet.exe -r:Mono.Posix.dll \
      src/Program.cs \
      src/Telnet/*.cs \
      src/Telnet/Options/*.cs \
      src/Terminal/*.cs \
      src/Console/*.cs \
      src/Transfer/*.cs \
      src/Logging/*.cs \
      src/Config/*.cs \
      src/Utils/*.cs

□ 14.3 테스트
  - Python 테스트 서버
  - 연결 테스트
  - 옵션 협상 테스트


단계 15: 문서화
---------------
□ 15.1 XML 문서 주석
  /// <summary>
  /// Telnet connection class
  /// </summary>
  public class TelnetConnection { ... }

□ 15.2 README.md
  - 빌드 방법
  - 사용법
  - 예제

□ 15.3 아키텍처 문서
  - docs/ARCHITECTURE.md
  - docs/RFC_COMPLIANCE.md


================================================================================
4. Mono 특화 고려사항
================================================================================

4.1 플랫폼 의존 코드
--------------------
터미널 제어 (Linux/Unix):
  using Mono.Unix;
  using Mono.Unix.Native;

  // Raw 모드 설정
  var termios = new Termios();
  Syscall.tcgetattr(0, out termios);
  // ... 설정 변경
  Syscall.tcsetattr(0, TermiosOptions.TCSAFLUSH, ref termios);

  // 윈도우 크기
  var winsize = new Winsize();
  Syscall.ioctl(0, Syscall.TIOCGWINSZ, ref winsize);

시그널 처리:
  using Mono.Unix;

  var signals = new UnixSignal[] {
      new UnixSignal(Signum.SIGINT),
      new UnixSignal(Signum.SIGTERM),
      new UnixSignal(Signum.SIGWINCH)
  };

  int index = UnixSignal.WaitAny(signals, timeout);


4.2 비동기 I/O
--------------
옵션 1: Select 방식 (원본 C 코드와 유사)
  - Socket.Select()
  - 동기 방식

옵션 2: 비동기 방식 (.NET 스타일)
  - async/await
  - NetworkStream.ReadAsync()
  - 더 현대적


4.3 바이트 처리
---------------
C#은 byte가 기본 타입:
  byte[] buffer = new byte[4096];
  int bytesRead = stream.Read(buffer, 0, buffer.Length);

IAC 이스케이프:
  List<byte> output = new List<byte>();
  foreach (byte b in input)
  {
      if (b == TelnetProtocol.IAC)
      {
          output.Add(TelnetProtocol.IAC);
          output.Add(TelnetProtocol.IAC);
      }
      else
      {
          output.Add(b);
      }
  }


================================================================================
5. mcs 컴파일 가이드
================================================================================

5.1 기본 컴파일
---------------
mcs -out:otelnet.exe src/Program.cs

5.2 여러 파일 컴파일
--------------------
mcs -out:otelnet.exe src/*.cs src/Telnet/*.cs

5.3 참조 라이브러리 추가
------------------------
mcs -out:otelnet.exe -r:Mono.Posix.dll src/Program.cs

5.4 디버그 빌드
---------------
mcs -debug -out:otelnet.exe src/Program.cs

5.5 실행
--------
mono otelnet.exe localhost 23


================================================================================
6. RFC 준수 체크리스트
================================================================================

RFC 854: Telnet Protocol
□ IAC(255) 명령 파싱
□ WILL/WONT/DO/DONT 처리
□ SB/SE 서브협상
□ IAC IAC 이스케이프
□ GA, NOP, AYT, IP, AO, BREAK, EL, EC, DM, EOR
□ CR/LF 처리

RFC 855: Option Negotiation
□ DO/DONT/WILL/WONT
□ 양방향 독립 협상
□ 루프 방지
□ 미지원 옵션 거부

RFC 856: Binary Transmission
□ BINARY 옵션 협상
□ 8비트 투명 전송
□ IAC 이스케이프 유지

RFC 858: Suppress Go Ahead
□ SGA 협상
□ GA 무시

RFC 1091: Terminal-Type
□ TERMINAL-TYPE 협상
□ SEND → IS <type>
□ 다중 타입 순환

RFC 1184: Linemode
□ LINEMODE 협상
□ MODE 서브옵션
□ FORWARDMASK 서브옵션
□ SLC 서브옵션

RFC 1073: NAWS
□ NAWS 협상
□ Window size 전송

RFC 1079: TSPEED
□ TSPEED 협상
□ 속도 정보 전송

RFC 1572: ENVIRON
□ ENVIRON 협상
□ 환경변수 전송


================================================================================
7. 예상 개발 일정
================================================================================

단계 1-3: 프로토콜 기반 (4일)
  - 프로젝트 초기화: 1일
  - RFC 854: 2일
  - RFC 855: 1일

단계 4-7: 옵션 및 서브협상 (6일)
  - 기본 옵션: 2일
  - 서브협상: 1일
  - 고급 옵션: 2일
  - LINEMODE: 1일

단계 8-10: 터미널, 설정, 로깅 (3일)
  - 터미널: 1.5일
  - 설정: 0.5일
  - 로깅: 1일

단계 11-12: 파일 전송, 콘솔 (3일)
  - 파일 전송: 1.5일
  - 콘솔 모드: 1.5일

단계 13: 메인 애플리케이션 (2일)

단계 14: 빌드 및 테스트 (3일)

단계 15: 문서화 (2일)

버퍼: 2일

총 예상 시간: 25일 (약 5주)


================================================================================
8. 시작 단계 (즉시 실행 가능)
================================================================================

1. 디렉토리 생성
   mkdir -p src/{Telnet/Options,Terminal,Console,Transfer,Logging,Config,Utils}
   mkdir -p test scripts docs

2. TelnetProtocol.cs 작성 (상수 정의)

3. TelnetConnection.cs 스켈레톤 작성

4. Program.cs 작성 (Main 함수)

5. Makefile 작성

6. 첫 빌드 및 테스트
   make build
   mono otelnet.exe --help


================================================================================
끝
================================================================================
